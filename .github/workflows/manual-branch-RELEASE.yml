name: manual-branch-RELEASE

env:
  GPG_KEY_ID_GITHUB_TECHUSER: '${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}'
  TECH_USER_USERNAME: ${{ vars.TECH_USER_USERNAME }}
  TECH_USER_EMAIL: ${{ vars.TECH_USER_EMAIL }}
  PROJECT_NAME: ${GITHUB_REPOSITORY#*/}
  DOCKER_BAKE_PLATFORM: linux/amd64,linux/arm64

on:
  workflow_dispatch:
    inputs:
      comment:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Comment for release'
        # Default value if no value is explicitly provided
        default: 'Start BRANCH release from WEB UI'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  manual-branch-RELEASE:
    name: Manual branch release

    # run only on release branch
    if: contains(github.ref_name, 'release')

    runs-on: ubuntu-latest

    steps:

###############
# pre release
###############
      - name: Import GPG key
        # GPG private key, which is exported with armor (beginning: '-----BEGIN PGP PRIVATE KEY BLOCK-----') this entire content is encoded in base64, and it is loaded into the secrets content
        # we decode the base64 encoded private key and load it
        run: |
          mkdir -p ~/.gnupg/
          echo "${{ secrets.GPG_SIGNING_KEY_GITHUB_TECHUSER }}" | base64 --decode > ~/.gnupg/private.key
          gpg --import ~/.gnupg/private.key
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          # The content is an SSH key in PEM format (beginning: '-----BEGIN RSA PRIVATE KEY-----')
          key: ${{ secrets.SSH_PRIVATE_KEY_GITHUB_TECHUSER }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }} # currently, its content is empty
          # config: ${{ secrets.CONFIG }} # ssh_config; optional

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure GIT for signed commit
        run: |
          git config --global user.name "${{ env.TECH_USER_USERNAME }}"
          git config --global user.email "${{ env.TECH_USER_EMAIL }}"
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Get current version from .env
        id: prepare
        shell: bash
        run: |
          CURRENT_SNAPSHOT=$(sed -rn 's/(^VERSION=)([^-]+)/\2/p' .env)
          echo current snapshot is ${CURRENT_SNAPSHOT}
          echo "CURRENT_SNAPSHOT=${CURRENT_SNAPSHOT}" >> $GITHUB_OUTPUT

          CURRENT_VERSION=$(sed -rn 's/(^VERSION=)([^-]+)(-SNAPSHOT|)$/\2/p' .env)
          echo current version is ${CURRENT_VERSION}
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

          GIT_TAG=${{ env.PROJECT_NAME }}-${CURRENT_VERSION}
          echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_OUTPUT
          echo git tag will be $GIT_TAG

          NEXT_VERSION=$(echo $CURRENT_VERSION |  awk -F'.' '{print $1"."$2"."$3+1}' |  sed s/[.]$//)-SNAPSHOT
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo next version will be $NEXT_VERSION

      - name: Remove SNAPSHOT postfix from version and commit/push it to release branch
        id: removeSnapshot
        shell: bash
        run: |
          sed -i -r "s/^[#]*\s*VERSION=.*/VERSION=${{steps.prepare.outputs.CURRENT_VERSION}}/" .env
          echo ".env file VERSION property successfully updated ('${{steps.prepare.outputs.CURRENT_SNAPSHOT}}' -> '${{steps.prepare.outputs.CURRENT_VERSION}}')"

          git commit -a -m "Bump version to ${{steps.prepare.outputs.CURRENT_VERSION}}"
          git push --atomic origin ${{github.ref}}

###############
## release
###############
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: docker buildx bake "#1"
        uses: docker/bake-action@v5
        with:
          set: |
            *.platform=${{ env.DOCKER_BAKE_PLATFORM }}
          push: true
          files: |
            docker-compose.yml
          targets: base-release,base-alpine-release,dind-runner-release
      - name: docker buildx bake "#2"
        uses: docker/bake-action@v5
        with:
          set: |
            *.platform=${{ env.DOCKER_BAKE_PLATFORM }}
          push: true
          files: |
            docker-compose.yml
          targets: curl-release,alpine-runner-release
      - name: docker buildx bake "#3"
        uses: docker/bake-action@v5
        with:
          set: |
            *.platform=${{ env.DOCKER_BAKE_PLATFORM }}
          push: true
          files: |
            docker-compose.yml
          targets: nexus-download-builder,java11jre-release,java17jre-release,java21jre-release
      - name: docker buildx bake "#4"
        uses: docker/bake-action@v5
        with:
          set: |
            *.platform=${{ env.DOCKER_BAKE_PLATFORM }}
          push: true
          files: |
            docker-compose.yml
          targets: java11-maven-builder,java17-maven-builder,java21-maven-builder,java17-maven-sonar-builder
      - name: docker buildx bake "#5"
        uses: docker/bake-action@v5
        with:
          set: |
            *.platform=${{ env.DOCKER_BAKE_PLATFORM }}
          push: true
          files: |
            docker-compose.yml
          targets: java11-galleon-builder,java17-galleon-builder,java21-galleon-builder

###############
## post release
###############
      - name: Create tag
        id: createTag
        shell: bash
        run: |
          git tag -a ${{steps.prepare.outputs.GIT_TAG}} -m "Release  ${{steps.prepare.outputs.GIT_TAG}}"
          echo "${{steps.prepare.outputs.GIT_TAG}} tag created."

      - name: Bump next BUGFIX version and commit/push it to release branch
        id: bumpRelease
        shell: bash
        run: |
          sed -i -r "s/^[#]*\s*VERSION=.*/VERSION=${{steps.prepare.outputs.NEXT_VERSION}}/" .env
          echo ".env file VERSION property successfully updated ('${{steps.prepare.outputs.CURRENT_VERSION}}' -> '${{steps.prepare.outputs.NEXT_VERSION}}')"

          git commit -a -m "Bump version to ${{steps.prepare.outputs.NEXT_VERSION}}"
          git push --atomic origin ${{github.ref_name}} ${{steps.prepare.outputs.GIT_TAG}}
